---
import { twMerge } from '@daks.dev/astro.sdk';
import { Dropdown, Link } from '@daks.dev/astro.sdk/astro';
import type { HTMLAttributes } from 'astro/types';

interface Props extends Omit<HTMLAttributes<'div'>, 'class' | 'role'> {
  class?: ClassValue;
  custom?: Record<string, ClassValue>;
}

const { class: className, custom = {}, ...props } = Astro.props;

import { sidebar } from '@app/configs/nav';
---

<nav
  class={twMerge('flex flex-col', 'text-sm leading-relaxed', className)}
  role='menu'
  inert
  {...props}>
  {
    sidebar.header &&
      sidebar.header?.map(
        ({ class: className, role = 'menuitem', itemprop = 'relatedLink', ...item }) => (
          <Link
            class:list={[custom.link, className]}
            {role}
            {itemprop}
            {...item}
          />
        )
      )
  }
  <hr class:list={['my-2 w-10/12 self-center', 'border-neutral-200 dark:border-neutral-700/50']} />
  {
    sidebar.body &&
      sidebar.body.map(({ class: className, ...item }) => {
        item.href = `/activity${item.href}`;
        item.role ??= 'menuitem';
        item.itemprop ??= item.href && 'relatedLink';
        const open = Astro.url.pathname !== item.href && Astro.url.pathname.startsWith(item.href);
        return item.items ? (
          <Dropdown
            toggle={item}
            class:list={['items-center justify-between', custom.link, className]}
            custom={{
              drop: ['static top-unset', 'indent-6']
            }}
            {open}>
            {item.items?.map((x) => {
              const {
                class: className,
                role = 'menuitem',
                itemprop = 'relatedLink',
                base = item.href?.toString(),
                ...link
              } = x;
              return (
                <Link
                  class:list={[custom.link, className]}
                  {role}
                  {itemprop}
                  {base}
                  {...link}
                />
              );
            })}
          </Dropdown>
        ) : (
          <Link
            class:list={[custom.link, className]}
            {...item}
          />
        );
      })
  }
  <hr class:list={['my-2 w-10/12 self-center', 'border-neutral-200 dark:border-neutral-700/50']} />
  {
    sidebar.footer &&
      sidebar.footer.map(
        ({ class: className, role = 'menuitem', itemprop = 'relatedLink', ...item }) => (
          <Link
            class:list={[custom.link, className]}
            {role}
            {itemprop}
            {...item}
          />
        )
      )
  }
</nav>
