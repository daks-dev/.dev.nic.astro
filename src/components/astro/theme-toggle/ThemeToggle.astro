---
import { twMerge } from '@daks.dev/astro.sdk';
import type { HTMLAttributes } from 'astro/types';

interface Props extends Omit<HTMLAttributes<'button'>, 'class'> {
  class?: ClassValue;
  custom?: Record<string, ClassValue>;
  label?: string;
  vertical?: true;
}

const {
  class: className,
  custom = {},
  vertical,
  'aria-label': ariaLabel,
  label = ariaLabel || 'цветовая тема',
  ...props
} = Astro.props;
---

<button
  is='app-theme-toggle'
  class={twMerge(
    'group',
    'flex items-center',
    vertical && 'flex-col',
    'outline-none select-none',
    'rounded-full border border-gray-300 dark:border-gray-700',
    'shadow-inset shadow-slate-300 dark:shadow-slate-600',
    'duration-200 motion-safe:ready:transition-colors',
    className
  )}
  aria-label={label}
  {...props}>
  <span
    class='sr-only'
    set:text={label}
  />
  <div
    class:list={[
      'toggler',
      'text-white dark:text-theme-plain',
      vertical ? 'dark:before:translate-y-full' : 'dark:before:translate-x-full'
    ]}>
    <span class:list={['block size-5', custom.light]}></span>
  </div>
  <div class:list={['relative z-10 flex p-1', 'text-theme-plain dark:text-black']}>
    <span class:list={['block size-5', custom.dark]}></span>
  </div>
</button>

<style scoped>
  @reference "@styles/global.css";

  .toggler {
    @apply relative z-10 flex p-1;
    &::before {
      @apply content-empty;
      @apply absolute inset-0 -z-10;
      @apply rounded-full bg-slate-400 dark:bg-slate-600;
      @apply duration-300 motion-safe:transition-transform;
    }
  }
</style>

<script>
  class AppThemeToggle extends HTMLButtonElement {
    readonly class = 'theme-dark';

    constructor() {
      super();
      // this.appendChild(this.querySelector('template')!.content.cloneNode(true));
    }

    connectedCallback() {
      this.addEventListener('click', this.toggle);
      if (this.dark) this.setAttribute('aria-pressed', 'true');
    }

    // disconnectedCallback() {}

    get dark() {
      return document.documentElement.classList.contains(this.class);
    }

    toggle = () => {
      document.documentElement.classList[this.dark ? 'remove' : 'add'](this.class);
      this.dark ? this.setAttribute('aria-pressed', 'true') : this.removeAttribute('aria-pressed');
    };
  }

  customElements.define('app-theme-toggle', AppThemeToggle, { extends: 'button' });
</script>
